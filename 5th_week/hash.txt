1. 해시란?
    데이터를 다루는 기법 중 하나.
    검색과 저장이 유용, 빠르게 진행됨
    데이터를 검색할 때 사용할 key와 실제 데이터 값이 한 쌍으로 존재하고, key값이 배열의 인덱스로 변환되기 때문
    해시 함수로 인해 각각의 key 값이 숫자로 변환, 인덱스 값으로 사용되어 해시 테이블에 value를 저장

2. 해시함수란?
    임의의 길이를 갖는 메시지를 입력받아 고정된 길이의 해시값을 출력하는 함수

3. 해시 구현 방법
    - 딕셔너리 활용
        1) 딕셔너리 삽입
        hash = dict() or {}
        hash[1] = 'apple'
        hash['banana'] = 3
        hash[(4, 5)] = [1, 2, 3]   key값이 튜플인 경우도 가능
        hash[10] = dict({1:'a', 2:'b'})
        배열, 집합({~~})은 key 값으로 사용 불가. 해시 함수에 의해 index로 변환 불가하기 때문

        2) 딕셔너리 수정
        hash[1] = 'melon'
        hash['banana'] = 10

        3) 딕셔너리 값 추출
        hash.pop(key값)
        
        4) 딕셔너리 삭제
        del hash[key값]
        del은 결과를 반환하지 않고 데이터를 삭제함

4. 딕셔너리 루프
    key값으로 반복문을 돌지, value로 돌지, 둘 다 사용할지를 함수로 결정
        hash = dict()
        hash.keys() : 모든 key 추출
        hash.values() : 모든 value 추출
        hash.items() : 모든 key, value를 튜플의 리스트로 반환

5. 딕셔너리 정렬
    sorted() : 딕셔너리를 sorted()로 정렬할 경우 항상 list 타입으로 반환
    정렬 기준은 keys, values, items를 이용
    sorted(hash.keys(), key = lambda x : x)
    sorted(hash.values(), key = lambda x : x)
    sorted(hash.items(), key = lambda x : x)  ==> key값에 의한 오름차순 정렬

    내림차순 정렬
    sorted(hash.keys(), key = lambda x : -x)
    sorted(hash.values(), key = lambda x : -x)
    items는 에러남 튜플에는 마이너스 줄 수 없음
    sorted(hash.items(), key = lambda x : -x[1])  ==> value에 의한 내림차순 정렬
    x[0], x[1] --> key 오름, value 오름
    -x[0], x[1] --> key 내림, value 오름
    x[1], x[0] --> key와 value 순서 바꾸기

